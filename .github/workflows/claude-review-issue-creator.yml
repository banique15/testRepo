name: Claude Review Issue Creator

on:
  workflow_run:
    workflows: ["Claude Code Review"]
    types: [completed]
    branches: [main, develop, master, claude/*, claude/issue-*]
  # Also allow manual trigger for testing
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process'
        required: true
        type: string

jobs:
  create-issues-from-review:
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request') || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      issues: write
      pull-requests: write  # Changed from read to write for commenting
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create required labels
        run: |
          # Create labels if they don't exist (ignore errors if they already exist)
          gh label create "security" --color "d73a4a" --description "Security related issues" || true
          gh label create "performance" --color "a2eeef" --description "Performance related issues" || true
          gh label create "bug" --color "d73a4a" --description "Bug related issues" || true
          gh label create "code-quality" --color "c5def5" --description "Code quality issues" || true
          gh label create "testing" --color "bfe5bf" --description "Testing related issues" || true
          gh label create "documentation" --color "0075ca" --description "Documentation issues" || true
          gh label create "automated-review" --color "e4e669" --description "Created by automated review" || true
          gh label create "severity:high" --color "b60205" --description "High severity" || true
          gh label create "severity:medium" --color "fbca04" --description "Medium severity" || true
          gh label create "severity:low" --color "0e8a16" --description "Low severity" || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files in PR
        id: changed-files
        if: steps.get-pr.outputs.pr_number
        run: |
          PR_NUMBER="${{ steps.get-pr.outputs.pr_number }}"
          
          # Get list of changed files in the PR
          CHANGED_FILES=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER/files \
            --jq '.[].filename' | tr '\n' '|')
          
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "Changed files in PR: $CHANGED_FILES"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR number from workflow run
        id: get-pr
        run: |
          # Handle manual trigger vs workflow_run trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            echo "Using manual PR number: $PR_NUMBER"
          else
            # Get the PR number from the workflow run that triggered this
            PR_NUMBER=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }} \
              --jq '.pull_requests[0].number // empty')
          fi
          
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR found for this workflow run"
            exit 0
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Found PR #$PR_NUMBER"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Claude review comments
        id: get-review
        if: steps.get-pr.outputs.pr_number
        run: |
          PR_NUMBER="${{ steps.get-pr.outputs.pr_number }}"
          
          # Get all comments from the PR that contain Claude review content
          echo "Fetching comments for PR #$PR_NUMBER..."
          
          # Get issue comments (general PR comments) - Claude action posts here
          CLAUDE_COMMENTS=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
            --jq '.[] | select(.user.login == "github-actions[bot]" and (.body | contains("claude") or contains("review") or contains("Code Review") or contains("feedback"))) | .body' || echo "")
          
          # Get PR review comments (line-specific comments)
          CLAUDE_REVIEW_COMMENTS=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER/comments \
            --jq '.[] | select(.user.login == "github-actions[bot]" and (.body | contains("claude") or contains("review") or contains("Code Review") or contains("feedback"))) | .body' || echo "")
          
          # Get PR reviews (overall review comments)
          CLAUDE_REVIEWS=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews \
            --jq '.[] | select(.user.login == "github-actions[bot]" and (.body | contains("claude") or contains("review") or contains("Code Review") or contains("feedback"))) | .body' || echo "")
          
          # Also check for comments from the anthropics/claude-code-action
          CLAUDE_ACTION_COMMENTS=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
            --jq '.[] | select(.user.type == "Bot" and (.body | length > 100)) | .body' || echo "")
          
          echo "Debug: Found comments from github-actions[bot]"
          
          # Combine and save to file for processing
          echo "$CLAUDE_COMMENTS" > claude_comments.txt
          echo "$CLAUDE_REVIEW_COMMENTS" >> claude_comments.txt
          echo "$CLAUDE_REVIEWS" >> claude_comments.txt
          echo "$CLAUDE_ACTION_COMMENTS" >> claude_comments.txt
          
          echo "Debug: Content preview:"
          head -20 claude_comments.txt || echo "No content found"
          
          # Check if we have any content
          if [ -s claude_comments.txt ]; then
            echo "has_comments=true" >> $GITHUB_OUTPUT
            echo "Found Claude review comments"
          else
            echo "has_comments=false" >> $GITHUB_OUTPUT
            echo "No Claude review comments found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse Claude review for issues
        id: parse-issues
        if: steps.get-review.outputs.has_comments == 'true'
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.changed_files }}"
          
          # Create a Python script to parse Claude review comments
          cat > parse_review.py << 'EOF'
          import re
          import json
          import sys
          import os
          
          # Get changed files from environment
          changed_files_str = os.environ.get('CHANGED_FILES', '')
          changed_files = [f.strip() for f in changed_files_str.split('|') if f.strip()]
          print(f"Changed files in PR: {changed_files}")
          
          # Define issue patterns and their categories - aligned with Claude Code Review prompt
          ISSUE_PATTERNS = {
              'security': {
                  'patterns': [
                      r'security\s+(?:concern|issue|vulnerability|risk)',
                      r'(?:sql\s+injection|xss|csrf|authentication|authorization)',
                      r'(?:sensitive|confidential)\s+(?:data|information)',
                      r'(?:password|token|key|secret)\s+(?:exposed|hardcoded|leaked)',
                      r'security\s+considerations?'
                  ],
                  'severity': 'high',
                  'label': 'security',
                  'emoji': '🔒'
              },
              'performance': {
                  'patterns': [
                      r'performance\s+(?:issue|concern|problem|considerations?)',
                      r'(?:slow|inefficient|bottleneck)',
                      r'(?:memory\s+leak|cpu\s+intensive)',
                      r'(?:optimization|optimize)\s+(?:needed|required)',
                      r'performance\s+considerations?'
                  ],
                  'severity': 'medium',
                  'label': 'performance',
                  'emoji': '⚡'
              },
              'bug': {
                  'patterns': [
                      r'(?:potential\s+)?(?:bug|error|issue)s?',
                      r'(?:null\s+pointer|undefined|exception)',
                      r'(?:race\s+condition|deadlock)',
                      r'(?:logic\s+error|incorrect\s+implementation)',
                      r'potential\s+(?:bug|issue)s?'
                  ],
                  'severity': 'high',
                  'label': 'bug',
                  'emoji': '🐛'
              },
              'code_quality': {
                  'patterns': [
                      r'code\s+quality',
                      r'(?:refactor|cleanup)\s+(?:needed|recommended)',
                      r'(?:duplicate|redundant)\s+code',
                      r'(?:complex|complicated)\s+(?:logic|function)',
                      r'best\s+practices?',
                      r'code\s+quality\s+and\s+best\s+practices?'
                  ],
                  'severity': 'medium',
                  'label': 'code-quality',
                  'emoji': '📝'
              },
              'testing': {
                  'patterns': [
                      r'(?:test|testing)\s+(?:missing|needed|required)',
                      r'(?:coverage|unit\s+test|integration\s+test)',
                      r'(?:edge\s+case|error\s+handling)\s+(?:missing|needed)',
                      r'test\s+coverage'
                  ],
                  'severity': 'medium',
                  'label': 'testing',
                  'emoji': '🧪'
              },
              'documentation': {
                  'patterns': [
                      r'(?:documentation|comment|doc)\s+(?:missing|needed)',
                      r'(?:unclear|confusing)\s+(?:naming|variable|function)',
                      r'(?:readme|changelog)\s+(?:update|needed)'
                  ],
                  'severity': 'low',
                  'label': 'documentation',
                  'emoji': '📚'
              }
          }
          
          def is_file_in_changed_files(file_path, changed_files):
              """Check if the file path matches any of the changed files"""
              if file_path == 'Unknown':
                  return False
              
              # Normalize file path
              file_path = file_path.strip('./')
              
              for changed_file in changed_files:
                  if changed_file.endswith(file_path) or file_path.endswith(changed_file):
                      return True
                  # Also check if it's a partial match (same filename)
                  if file_path.split('/')[-1] == changed_file.split('/')[-1]:
                      return True
              return False
          
          def extract_issues_from_text(text):
              issues = []
              lines = text.split('\n')
              
              for i, line in enumerate(lines):
                  line_lower = line.lower()
                  
                  # Skip lines that are just general feedback
                  if any(skip_word in line_lower for skip_word in [
                      'overall', 'general', 'suggestion', 'consider', 'might want to',
                      'could improve', 'recommendation', 'nice work', 'good job'
                  ]):
                      continue
                  
                  for category, config in ISSUE_PATTERNS.items():
                      for pattern in config['patterns']:
                          if re.search(pattern, line_lower, re.IGNORECASE):
                              # Extract context (current line + next few lines)
                              context_lines = lines[max(0, i-1):min(len(lines), i+4)]
                              context = '\n'.join(context_lines).strip()
                              
                              # Try to extract file path with multiple patterns
                              file_path = 'Unknown'
                              
                              # Pattern 1: Files in backticks like `src/file.js`
                              file_match = re.search(r'`([^`]+\.[a-zA-Z]+)`', context)
                              if file_match:
                                  file_path = file_match.group(1)
                              else:
                                  # Pattern 2: Files mentioned without backticks
                                  file_match = re.search(r'(?:in|file|src/|\./)([a-zA-Z0-9_/-]+\.[a-zA-Z]+)', context, re.IGNORECASE)
                                  if file_match:
                                      file_path = file_match.group(1)
                                  else:
                                      # Pattern 3: Look for common file extensions
                                      file_match = re.search(r'([a-zA-Z0-9_/-]+\.(?:js|ts|jsx|tsx|py|java|cpp|c|html|css|astro|vue|php))', context, re.IGNORECASE)
                                      if file_match:
                                          file_path = file_match.group(1)
                                      else:
                                          # Pattern 4: Extract from the broader context (look in more lines)
                                          broader_context_lines = lines[max(0, i-5):min(len(lines), i+10)]
                                          broader_context = '\n'.join(broader_context_lines)
                                          file_match = re.search(r'`([^`]+\.[a-zA-Z]+)`', broader_context)
                                          if file_match:
                                              file_path = file_match.group(1)
                              
                              # FILTER: Only include issues from changed files OR critical issues
                              if file_path != 'Unknown' and not is_file_in_changed_files(file_path, changed_files):
                                  print(f"Skipping issue in unchanged file: {file_path}")
                                  continue
                              
                              issue = {
                                  'category': category,
                                  'severity': config['severity'],
                                  'label': config['label'],
                                  'emoji': config['emoji'],
                                  'description': line.strip(),
                                  'context': context,
                                  'file_path': file_path,
                                  'line_number': i + 1
                              }
                              issues.append(issue)
                              break
              
              return issues
          
          # Read the Claude comments
          try:
              with open('claude_comments.txt', 'r') as f:
                  content = f.read()
              
              print("Debug: Claude review content preview:")
              print("=" * 50)
              print(content[:1000])  # First 1000 characters
              print("=" * 50)
              
              issues = extract_issues_from_text(content)
              
              # Remove duplicates and apply additional filtering
              unique_issues = []
              for issue in issues:
                  is_duplicate = False
                  for existing in unique_issues:
                      if (issue['category'] == existing['category'] and
                          issue['file_path'] == existing['file_path'] and
                          len(set(issue['description'].split()) & set(existing['description'].split())) > 3):
                          is_duplicate = True
                          break
                  if not is_duplicate:
                      unique_issues.append(issue)
              
              # Limit to maximum 5 issues to avoid spam
              if len(unique_issues) > 5:
                  print(f"Limiting to 5 most critical issues (found {len(unique_issues)})")
                  # Sort by severity priority: security > bug > performance
                  severity_order = {'security': 0, 'bug': 1, 'performance': 2}
                  unique_issues.sort(key=lambda x: severity_order.get(x['category'], 99))
                  unique_issues = unique_issues[:5]
              
              print(f"Final filtered issues: {len(unique_issues)}")
              
              # Output as JSON for GitHub Actions
              with open('parsed_issues.json', 'w') as f:
                  json.dump(unique_issues, f, indent=2)
              
              # Set output for GitHub Actions
              print(f"issue_count={len(unique_issues)}")
              
          except Exception as e:
              print(f"Error parsing issues: {e}")
              sys.exit(1)
          EOF
          
          # Run the parser
          CHANGED_FILES="$CHANGED_FILES" python parse_review.py
          
          # Read the results
          if [ -f "parsed_issues.json" ]; then
            ISSUE_COUNT=$(python -c "import json; print(len(json.load(open('parsed_issues.json'))))")
            echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
            echo "Found $ISSUE_COUNT issues to create"
          else
            echo "issue_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub issues
        if: steps.parse-issues.outputs.issue_count > 0
        run: |
          PR_NUMBER="${{ steps.get-pr.outputs.pr_number }}"
          
          # Read parsed issues
          python << 'EOF'
          import json
          import subprocess
          import os
          
          def create_github_issue(issue, pr_number):
              # Create a more descriptive title
              if issue['file_path'] != 'Unknown':
                  title = f"{issue['emoji']} {issue['category'].title()}: {issue['file_path']}"
              else:
                  # Use first few words of description if file path is unknown
                  desc_words = issue['description'].split()[:6]
                  short_desc = ' '.join(desc_words)
                  if len(issue['description'].split()) > 6:
                      short_desc += '...'
                  title = f"{issue['emoji']} {issue['category'].title()}: {short_desc}"
              
              body = f"""## 🔍 Claude Code Review Finding
          
          **Source PR**: #{pr_number}
          **File**: `{issue['file_path']}`
          **Severity**: {issue['severity'].title()}
          **Category**: {issue['category'].title()}
          
          ### Description
          {issue['description']}
          
          ### Context
          ```
          {issue['context']}
          ```
          
          ### Recommendation
          Please review and address this finding from the automated Claude code review.
          
          ---
          *This issue was automatically created from Claude code review findings.*
          """
              
              # Create the issue using GitHub CLI
              cmd = [
                  'gh', 'issue', 'create',
                  '--title', title,
                  '--body', body,
                  '--label', issue['label'],
                  '--label', f"severity:{issue['severity']}",
                  '--label', 'automated-review'
              ]
              
              try:
                  result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                  issue_url = result.stdout.strip()
                  issue_number = issue_url.split('/')[-1]
                  print(f"Created issue: {issue_url}")
                  
                  # Link the issue to the PR by commenting on the PR
                  pr_comment = f"🔗 **Linked Issue Created**: #{issue_number} - {title}"
                  subprocess.run([
                      'gh', 'pr', 'comment', str(pr_number),
                      '--body', pr_comment
                  ], check=True)
                  
                  return {'url': issue_url, 'number': issue_number}
              except subprocess.CalledProcessError as e:
                  print(f"Failed to create issue: {e}")
                  print(f"Error output: {e.stderr}")
                  return None
          
          # Load and process issues
          try:
              with open('parsed_issues.json', 'r') as f:
                  issues = json.load(f)
              
              created_issues = []
              for issue in issues:
                  issue_result = create_github_issue(issue, os.environ['PR_NUMBER'])
                  if issue_result:
                      created_issues.append(issue_result)
              
              print(f"Successfully created {len(created_issues)} issues")
              
              # Store issue numbers for the summary comment
              with open('created_issues.json', 'w') as f:
                  json.dump(created_issues, f, indent=2)
              
          except Exception as e:
              print(f"Error creating issues: {e}")
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.get-pr.outputs.pr_number }}

      - name: Comment on PR with issue summary
        if: steps.parse-issues.outputs.issue_count > 0
        run: |
          PR_NUMBER="${{ steps.get-pr.outputs.pr_number }}"
          ISSUE_COUNT="${{ steps.parse-issues.outputs.issue_count }}"
          
          COMMENT="## 📋 Claude Review Issues Created
          
          I've analyzed the Claude code review and created **$ISSUE_COUNT** critical issues for tracking:
          
          ### 🎯 Issues Created:
          $(python -c "
          import json
          try:
              # Load both parsed issues and created issue results
              with open('parsed_issues.json', 'r') as f:
                  issues = json.load(f)
              
              created_issues = []
              try:
                  with open('created_issues.json', 'r') as f:
                      created_issues = json.load(f)
              except:
                  pass
              
              if not issues:
                  print('✅ No critical issues found in the changed files.')
              else:
                  # Group by severity
                  high_issues = []
                  medium_issues = []
                  low_issues = []
                  
                  for i, issue in enumerate(issues):
                      issue_info = {
                          'issue': issue,
                          'created': created_issues[i] if i < len(created_issues) and created_issues[i] else None
                      }
                      
                      if issue['severity'] == 'high':
                          high_issues.append(issue_info)
                      elif issue['severity'] == 'medium':
                          medium_issues.append(issue_info)
                      else:
                          low_issues.append(issue_info)
                  
                  # Display high severity first
                  if high_issues:
                      print('#### 🚨 High Severity Issues:')
                      for item in high_issues:
                          issue = item['issue']
                          created = item['created']
                          desc = issue['description'][:80] + '...' if len(issue['description']) > 80 else issue['description']
                          if created:
                              print(f\"- {issue['emoji']} **{issue['category'].title()}**: {desc}\")
                              print(f\"  📁 File: \`{issue['file_path']}\` → [Issue #{created['number']}](../../issues/{created['number']})\")
                              print()
                          else:
                              print(f\"- {issue['emoji']} **{issue['category'].title()}**: {desc}\")
                              print(f\"  📁 File: \`{issue['file_path']}\`\")
                              print()
                  
                  # Display medium severity
                  if medium_issues:
                      print('#### ⚠️ Medium Severity Issues:')
                      for item in medium_issues:
                          issue = item['issue']
                          created = item['created']
                          desc = issue['description'][:80] + '...' if len(issue['description']) > 80 else issue['description']
                          if created:
                              print(f\"- {issue['emoji']} **{issue['category'].title()}**: {desc}\")
                              print(f\"  📁 File: \`{issue['file_path']}\` → [Issue #{created['number']}](../../issues/{created['number']})\")
                              print()
                          else:
                              print(f\"- {issue['emoji']} **{issue['category'].title()}**: {desc}\")
                              print(f\"  📁 File: \`{issue['file_path']}\`\")
                              print()
                  
                  # Display low severity
                  if low_issues:
                      print('#### ℹ️ Low Severity Issues:')
                      for item in low_issues:
                          issue = item['issue']
                          created = item['created']
                          desc = issue['description'][:80] + '...' if len(issue['description']) > 80 else issue['description']
                          if created:
                              print(f\"- {issue['emoji']} **{issue['category'].title()}**: {desc}\")
                              print(f\"  📁 File: \`{issue['file_path']}\` → [Issue #{created['number']}](../../issues/{created['number']})\")
                              print()
                          else:
                              print(f\"- {issue['emoji']} **{issue['category'].title()}**: {desc}\")
                              print(f\"  📁 File: \`{issue['file_path']}\`\")
                              print()
          except Exception as e:
              print(f'Error generating issue list: {e}')
          ")
          
          ### 📊 Summary:
          - **Total Issues Created**: $ISSUE_COUNT
          - **Focus**: Only critical issues from changed files
          - **Filtered Out**: General suggestions, unchanged files, low-priority items
          - **Max Limit**: 5 issues per PR to avoid spam
          
          ### 🔗 Quick Actions:
          - [View all issues from this PR](../../issues?q=is%3Aissue+label%3Aautomated-review+\"Source+PR%3A+%23$PR_NUMBER\")
          - [View high severity issues](../../issues?q=is%3Aissue+label%3Aseverity%3Ahigh+\"Source+PR%3A+%23$PR_NUMBER\")
          - [View security issues](../../issues?q=is%3Aissue+label%3Asecurity+\"Source+PR%3A+%23$PR_NUMBER\")
          
          ---
          *Issues created automatically by Claude Review Issue Creator - Only critical findings from changed files*"
          
          gh pr comment $PR_NUMBER --body "$COMMENT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          rm -f claude_comments.txt parsed_issues.json parse_review.py created_issues.json