name: Visual Web Testing

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main, develop, master]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  visual-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          npm install puppeteer

      - name: Build site
        run: npm run build

      - name: Start preview server
        run: |
          npm run preview &
          sleep 10

      - name: Run visual tests
        id: visual-tests
        run: |
          cat > simple-visual-test.cjs << 'EOF'
          const puppeteer = require('puppeteer');
          
          const pages = [
            { name: 'Home', path: '/' },
            { name: 'About', path: '/about' },
            { name: 'Gallery', path: '/gallery' },
            { name: 'Contact', path: '/contact' },
            { name: 'FAQ', path: '/faq' }
          ];
          
          async function runTests() {
            const browser = await puppeteer.launch({
              headless: 'new',
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const results = [];
            let totalTests = 0;
            let passedTests = 0;
            
            for (const page of pages) {
              console.log(`Testing ${page.name}...`);
              const pageResult = await testPage(browser, page);
              results.push(pageResult);
              totalTests++;
              if (pageResult.status === 'passed') passedTests++;
            }
            
            await browser.close();
            
            // Generate simple comment
            let comment = `## üì∏ Visual Test Results\n\n`;
            comment += `**Summary:** ${passedTests}/${totalTests} pages loaded successfully\n\n`;
            
            results.forEach(result => {
              const emoji = result.status === 'passed' ? '‚úÖ' : '‚ùå';
              comment += `- ${emoji} **${result.name}** (${result.path})\n`;
              if (result.error) {
                comment += `  - Error: ${result.error}\n`;
              }
              if (result.title) {
                comment += `  - Title: "${result.title}"\n`;
              }
            });
            
            comment += `\n---\n*Visual testing completed*`;
            
            // Output for GitHub Actions
            console.log('TEST_COMMENT=' + Buffer.from(comment).toString('base64'));
            console.log('TEST_PASSED=' + (passedTests === totalTests ? 'true' : 'false'));
            
            if (passedTests < totalTests) {
              process.exit(1);
            }
          }
          
          async function testPage(browser, pageConfig) {
            const page = await browser.newPage();
            const result = {
              name: pageConfig.name,
              path: pageConfig.path,
              status: 'failed',
              error: null,
              title: null
            };
            
            try {
              await page.setViewport({ width: 1920, height: 1080 });
              
              const response = await page.goto(`http://localhost:4321${pageConfig.path}`, {
                waitUntil: 'networkidle2',
                timeout: 15000
              });
              
              if (response.ok()) {
                result.title = await page.title();
                result.status = 'passed';
              } else {
                result.error = `HTTP ${response.status()}`;
              }
              
            } catch (error) {
              result.error = error.message;
            } finally {
              await page.close();
            }
            
            return result;
          }
          
          runTests().catch(error => {
            console.error('Test failed:', error);
            process.exit(1);
          });
          EOF
          
          node simple-visual-test.cjs

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        run: |
          # Extract comment from test output
          COMMENT_B64=$(echo "${{ steps.visual-tests.outputs.stdout }}" | grep "TEST_COMMENT=" | cut -d'=' -f2)
          
          if [ ! -z "$COMMENT_B64" ]; then
            COMMENT=$(echo "$COMMENT_B64" | base64 -d)
            gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT"
          else
            gh pr comment ${{ github.event.pull_request.number }} --body "## üì∏ Visual Testing
            
            Visual tests completed. Check workflow logs for details."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}