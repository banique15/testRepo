name: Error Detection & Issue Creation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  detect-errors:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read
      actions: read
    
    outputs:
      has-errors: ${{ steps.error-summary.outputs.has-errors }}
      error-count: ${{ steps.error-summary.outputs.error-count }}
      error-types: ${{ steps.error-summary.outputs.error-types }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        id: install
        run: |
          echo "::group::Installing dependencies"
          npm ci
          echo "::endgroup::"
        continue-on-error: true

      - name: Check for dependency installation errors
        if: steps.install.outcome == 'failure'
        run: |
          echo "DEPENDENCY_ERROR=true" >> $GITHUB_ENV
          echo "::error::Dependency installation failed"

      - name: Run build check
        id: build
        run: |
          echo "::group::Building project"
          npm run build
          echo "::endgroup::"
        continue-on-error: true

      - name: Check for build errors
        if: steps.build.outcome == 'failure'
        run: |
          echo "BUILD_ERROR=true" >> $GITHUB_ENV
          echo "::error::Build failed"

      - name: Run linting
        id: lint
        run: |
          echo "::group::Running linter"
          if npm run lint --silent 2>/dev/null; then
            npm run lint
          else
            echo "No lint script found, skipping..."
          fi
          echo "::endgroup::"
        continue-on-error: true

      - name: Check for linting errors
        if: steps.lint.outcome == 'failure'
        run: |
          echo "LINT_ERROR=true" >> $GITHUB_ENV
          echo "::error::Linting failed"

      - name: Run type checking
        id: typecheck
        run: |
          echo "::group::Running type check"
          if npm run typecheck --silent 2>/dev/null; then
            npm run typecheck
          else
            if command -v tsc &> /dev/null; then
              npx tsc --noEmit
            else
              echo "No TypeScript checking available, skipping..."
            fi
          fi
          echo "::endgroup::"
        continue-on-error: true

      - name: Check for type errors
        if: steps.typecheck.outcome == 'failure'
        run: |
          echo "TYPE_ERROR=true" >> $GITHUB_ENV
          echo "::error::Type checking failed"

      - name: Run tests
        id: test
        run: |
          echo "::group::Running tests"
          if npm run test --silent 2>/dev/null; then
            npm run test
          else
            echo "No test script found, skipping..."
          fi
          echo "::endgroup::"
        continue-on-error: true

      - name: Check for test errors
        if: steps.test.outcome == 'failure'
        run: |
          echo "TEST_ERROR=true" >> $GITHUB_ENV
          echo "::error::Tests failed"

      - name: Security audit
        id: audit
        run: |
          echo "::group::Running security audit"
          npm audit --audit-level=high
          echo "::endgroup::"
        continue-on-error: true

      - name: Check for security vulnerabilities
        if: steps.audit.outcome == 'failure'
        run: |
          echo "SECURITY_ERROR=true" >> $GITHUB_ENV
          echo "::error::Security vulnerabilities found"

      - name: Check file structure and conventions
        id: structure
        run: |
          echo "::group::Checking project structure"
          
          missing_files=()
          
          if [ ! -f "package.json" ]; then
            missing_files+=("package.json")
          fi
          
          if [ ! -f "astro.config.mjs" ] && [ ! -f "astro.config.js" ]; then
            missing_files+=("astro.config.mjs or astro.config.js")
          fi
          
          if [ ! -d "src" ]; then
            missing_files+=("src directory")
          fi
          
          if [ ! -d "src/pages" ]; then
            missing_files+=("src/pages directory")
          fi
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "STRUCTURE_ERROR=true" >> $GITHUB_ENV
            echo "::error::Missing required files/directories: ${missing_files[*]}"
            exit 1
          fi
          
          echo "Project structure looks good!"
          echo "::endgroup::"
        continue-on-error: true

      - name: Check for structure errors
        if: steps.structure.outcome == 'failure'
        run: |
          echo "STRUCTURE_ERROR=true" >> $GITHUB_ENV
          echo "::error::Project structure issues found"

      - name: Summarize errors
        id: error-summary
        run: |
          error_count=0
          error_types=()
          
          if [ "$DEPENDENCY_ERROR" = "true" ]; then
            error_count=$((error_count + 1))
            error_types+=("dependency")
          fi
          
          if [ "$BUILD_ERROR" = "true" ]; then
            error_count=$((error_count + 1))
            error_types+=("build")
          fi
          
          if [ "$LINT_ERROR" = "true" ]; then
            error_count=$((error_count + 1))
            error_types+=("lint")
          fi
          
          if [ "$TYPE_ERROR" = "true" ]; then
            error_count=$((error_count + 1))
            error_types+=("type")
          fi
          
          if [ "$TEST_ERROR" = "true" ]; then
            error_count=$((error_count + 1))
            error_types+=("test")
          fi
          
          if [ "$SECURITY_ERROR" = "true" ]; then
            error_count=$((error_count + 1))
            error_types+=("security")
          fi
          
          if [ "$STRUCTURE_ERROR" = "true" ]; then
            error_count=$((error_count + 1))
            error_types+=("structure")
          fi
          
          echo "error-count=$error_count" >> $GITHUB_OUTPUT
          echo "error-types=${error_types[*]}" >> $GITHUB_OUTPUT
          
          if [ $error_count -gt 0 ]; then
            echo "has-errors=true" >> $GITHUB_OUTPUT
            echo "Found $error_count error(s): ${error_types[*]}"
          else
            echo "has-errors=false" >> $GITHUB_OUTPUT
            echo "No errors detected!"
          fi

  create-issues:
    needs: detect-errors
    if: needs.detect-errors.outputs.has-errors == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create error issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ERROR_COUNT: ${{ needs.detect-errors.outputs.error-count }}
          ERROR_TYPES: ${{ needs.detect-errors.outputs.error-types }}
          RUN_ID: ${{ github.run_id }}
          SHA: ${{ github.sha }}
          REF: ${{ github.ref }}
          ACTOR: ${{ github.actor }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          # Create issue body
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          BRANCH_NAME=${REF#refs/heads/}
          SHORT_SHA=${SHA:0:7}
          
          # Build error descriptions
          ERROR_DESCRIPTIONS=""
          for error_type in $ERROR_TYPES; do
            case $error_type in
              "dependency")
                ERROR_DESCRIPTIONS="${ERROR_DESCRIPTIONS}- üîó **Dependency Issues**: Problems with package installation or dependencies\n"
                ;;
              "build")
                ERROR_DESCRIPTIONS="${ERROR_DESCRIPTIONS}- üèóÔ∏è **Build Errors**: Compilation or build process failures\n"
                ;;
              "lint")
                ERROR_DESCRIPTIONS="${ERROR_DESCRIPTIONS}- üßπ **Linting Issues**: Code style and quality violations\n"
                ;;
              "type")
                ERROR_DESCRIPTIONS="${ERROR_DESCRIPTIONS}- üî§ **Type Errors**: TypeScript type checking failures\n"
                ;;
              "test")
                ERROR_DESCRIPTIONS="${ERROR_DESCRIPTIONS}- üß™ **Test Failures**: Unit or integration test failures\n"
                ;;
              "security")
                ERROR_DESCRIPTIONS="${ERROR_DESCRIPTIONS}- üîí **Security Issues**: Vulnerabilities in dependencies\n"
                ;;
              "structure")
                ERROR_DESCRIPTIONS="${ERROR_DESCRIPTIONS}- üìÅ **Structure Issues**: Missing required files or directories\n"
                ;;
              *)
                ERROR_DESCRIPTIONS="${ERROR_DESCRIPTIONS}- ‚ùì **${error_type}**: Unknown error type\n"
                ;;
            esac
          done
          
          # Create issue
          ISSUE_TITLE="üö® Automated Error Detection - ${ERROR_COUNT} Error(s) Found"
          
          ISSUE_BODY="## üîç Error Detection Report

          **Detected at:** ${TIMESTAMP}
          **Triggered by:** ${EVENT_NAME}
          **Commit:** ${SHORT_SHA}
          **Branch:** ${BRANCH_NAME}
          **Actor:** ${ACTOR}

          ### üìä Error Summary
          - **Total Errors:** ${ERROR_COUNT}
          - **Error Types:** ${ERROR_TYPES}

          ### üîó Details
          - **Workflow Run:** [View Details](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${RUN_ID})
          - **Commit:** [${SHORT_SHA}](https://github.com/${GITHUB_REPOSITORY}/commit/${SHA})

          ### ü§ñ Next Steps
          This issue has been automatically created by the error detection system. The auto-fix workflow will be triggered to attempt resolution.

          ### üìù Error Categories Detected
          ${ERROR_DESCRIPTIONS}

          ---
          *This issue was automatically created by the Error Detection workflow. To trigger manual fixing, comment with \`@claude\`.*"
          
          # Create the issue using GitHub CLI
          gh issue create \
            --title "$ISSUE_TITLE" \
            --body "$ISSUE_BODY" \
            --label "auto-fix,error-detection,bug,automated"
          
          # Add additional labels based on error types
          ADDITIONAL_LABELS=""
          if echo "$ERROR_TYPES" | grep -q "security"; then
            ADDITIONAL_LABELS="${ADDITIONAL_LABELS},security"
          fi
          if echo "$ERROR_TYPES" | grep -q "build"; then
            ADDITIONAL_LABELS="${ADDITIONAL_LABELS},build"
          fi
          if echo "$ERROR_TYPES" | grep -q "test"; then
            ADDITIONAL_LABELS="${ADDITIONAL_LABELS},testing"
          fi
          
          if [ -n "$ADDITIONAL_LABELS" ]; then
            ISSUE_NUMBER=$(gh issue list --label "auto-fix,error-detection" --limit 1 --json number --jq '.[0].number')
            gh issue edit $ISSUE_NUMBER --add-label "${ADDITIONAL_LABELS#,}"
          fi

  notify-success:
    needs: detect-errors
    if: needs.detect-errors.outputs.has-errors == 'false'
    runs-on: ubuntu-latest
    
    steps:
      - name: Log success
        run: |
          echo "‚úÖ No errors detected in the codebase!"
          echo "All checks passed successfully."